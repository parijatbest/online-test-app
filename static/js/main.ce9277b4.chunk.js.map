{"version":3,"sources":["components/QuestionView/NavBar/NavBar.js","components/QuestionView/QuestionNavigation/QuestionNavigation.js","components/QuestionView/QuestionMap/QuestionMap.js","components/QuestionView/Options/Options.js","components/QuestionView/Question/Question.js","components/QuestionView/QuestionView.js","components/LeftPanel/LeftPanel.js","components/LoginStatus/LoginStatus.js","components/Counter/Counter.js","components/RightPanel/RightPanel.js","components/Layout/Layout.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","react_default","a","createElement","Nav","variant","defaultActiveKey","Item","Link","eventKey","href","className","Component","QuestionNavigation","Button","disabled","QuestionMap","Options","Form","map","opt","ind","Check","custom","type","name","id","concat","key","label","Question","QuestionView_Options_Options","QuestionView_QuestionNavigation_QuestionNavigation","QuestionView_QuestionMap_QuestionMap","QuestionView","QuestionView_NavBar_NavBar","QuestionView_Question_Question","LeftPanel","LoginStatus","Counter","RightPanel","Fragment","components_LoginStatus_LoginStatus","components_Counter_Counter","Layout","Container","Row","Col","lg","components_LeftPanel_LeftPanel","components_RightPanel_RightPanel","components_QuestionView_QuestionView","App","components_Layout_Layout","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ce9277b4.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Nav } from 'react-bootstrap';\r\n\r\nclass NavBar extends Component {\r\n    render() {\r\n        return (\r\n            <Nav variant=\"pills\" defaultActiveKey=\"link-1\">\r\n                <Nav.Item>\r\n                    <Nav.Link eventKey=\"link-1\">LOGICAL SECTION</Nav.Link>\r\n                </Nav.Item>\r\n                <Nav.Item>\r\n                    <Nav.Link eventKey=\"link-2\">APTITUDE SECTION</Nav.Link>\r\n                </Nav.Item>\r\n                <Nav.Item>\r\n                    <Nav.Link eventKey=\"link-3\">REASONING SECTION</Nav.Link>\r\n                </Nav.Item>\r\n                <a href=\"javasript:void(0);\" className=\"help-text\">Need Help?</a>\r\n            </Nav>\r\n        );\r\n    }\r\n}\r\n\r\nexport default NavBar;","import React, { Component } from 'react';\r\nimport { Button } from 'react-bootstrap';\r\n\r\nclass QuestionNavigation extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"question-nav\">\r\n                <Button variant=\"primary\" className=\"prev-question\" disabled>Previous Question</Button>\r\n                <Button variant=\"primary\" className=\"next-question\">Next Question</Button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default QuestionNavigation;","import React, { Component } from 'react';\r\n\r\nclass QuestionMap extends Component {\r\n    render() {\r\n        const sectionName = \"logical section\";\r\n        return (\r\n            <div className=\"question-map\">\r\n                <h3 className=\"qmap-heading\">Questions in {sectionName}</h3>\r\n                <div className=\"qmap-badge\">B1 B2 ...</div>\r\n                <div className=\"qmap-legend\">\r\n                    <div className=\"legend answered\">Answered</div>\r\n                    <div className=\"legend unanswered\">Unanswered</div>\r\n                    <div className=\"legend current\">Current question</div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default QuestionMap;","import React, { Component } from 'react';\r\nimport { Form } from 'react-bootstrap';\r\n\r\nclass Options extends Component {\r\n    render() {\r\n        const options = [\"Sample answer 1\", \"Sample answer 2\", \"Sample answer 3\", \"Sample answer 4\"];\r\n\r\n        return (\r\n            <Form>\r\n                {options.map((opt, ind) => {\r\n                    return (<Form.Check\r\n                        custom\r\n                        type=\"radio\"\r\n                        name=\"logical-q1-opt\"\r\n                        id={`logical-q1-${ind}`}\r\n                        key={`logical-q1-${ind}`}\r\n                        label={opt}\r\n                    />)\r\n                })}\r\n            </Form>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Options;","import React, { Component } from 'react';\r\nimport QuestionNavigation from '../QuestionNavigation/QuestionNavigation';\r\nimport QuestionMap from './../QuestionMap/QuestionMap';\r\nimport Options from './../Options/Options';\r\n\r\nclass Question extends Component {\r\n    render() {\r\n        const qNo = 1;\r\n\r\n        return (\r\n            <div className=\"question\">\r\n                <h2 className=\"question-heading\">Question {qNo}</h2>\r\n                <div className=\"question-box\">\r\n                    <div className=\"question-desc\">How to answer a question in this application?</div>\r\n                    <div className=\"question-opt\">\r\n                        <Options />\r\n                    </div>\r\n                    <QuestionNavigation />\r\n                </div>\r\n                <QuestionMap />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Question;","import React, { Component } from 'react';\r\nimport NavBar from './NavBar/NavBar';\r\nimport Question from './Question/Question';\r\n\r\nclass QuestionView extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"question-view\">\r\n                <NavBar />\r\n                <Question />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default QuestionView;","import React, { Component } from 'react';\r\nimport { Button } from 'react-bootstrap';\r\n\r\nclass LeftPanel extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Button type=\"submit\" variant=\"primary\" className=\"submit-test\">SUBMIT TEST</Button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default LeftPanel;","import React, { Component } from 'react';\r\n\r\nclass LoginStatus extends Component {\r\n    render() {\r\n        const isLoggedIn = true;// Will be evaluated from login service in actual implementation\r\n        return (\r\n            !isLoggedIn ? null : (\r\n                <div className=\"login-status\">\r\n                    <p className=\"login-status-msg\">LOGGED IN AS</p>\r\n                    <p className=\"login-status-id\">10STUHHCS0011</p>\r\n                </div>\r\n            )\r\n        )\r\n    }\r\n}\r\n\r\nexport default LoginStatus;","import React, { Component } from 'react';\r\n\r\nclass Counter extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"counter\">\r\n                <p className=\"counter-text\">TIME LEFT</p>\r\n                <p className=\"counter-time\">01:10:12</p>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Counter;","import React, { Component } from 'react';\r\nimport LoginStatus from '../LoginStatus/LoginStatus';\r\nimport Counter from '../Counter/Counter';\r\n\r\nclass RightPanel extends Component {\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <LoginStatus />\r\n                <Counter />\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default RightPanel;","import React, { Component } from 'react';\r\nimport QuestionView from '../QuestionView/QuestionView';\r\nimport LeftPanel from './../LeftPanel/LeftPanel';\r\nimport RightPanel from './../RightPanel/RightPanel';\r\nimport { Container, Row, Col } from 'react-bootstrap';\r\n\r\nclass Layout extends Component {\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <Container>\r\n                    <Row>\r\n                        <Col lg=\"9\" className=\"left-panel\">\r\n                            <LeftPanel />\r\n                        </Col>\r\n                        <Col lg=\"3\" className=\"right-panel\">\r\n                            <RightPanel />\r\n                        </Col>\r\n                    </Row>\r\n                    <QuestionView />\r\n                </Container>\r\n                {/* Modal */}\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Layout;","import React from 'react';\nimport Layout from './components/Layout/Layout'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Layout />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}